import numpy as np
import matplotlib.pyplot as plt

from matplotlib import animation, rc
from IPython.display import HTML

L=1 #m
alpha=0.1 #m^2/s
lambdan=alpha*(np.pi/L)**2
T0 = 5

x = np.linspace(0, L, 200)

# First set up the figure, the axis, and the plot element we want to animate
fig, ax = plt.subplots()
plt.close()

T0 = 5*np.ones(x.shape)
ax.plot(x,T0,'--',label='Initial Temp Profile')

ax.set_xlim(( -0.5, 1.5))
ax.set_ylim((0, 6))
ax.set_xlabel('x')
ax.set_ylabel('Temperature [K]')
line, = ax.plot([], [], lw=2, label='Temperature Profile')
ax.legend()

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return (line,)

# animation function. This is called sequentially  
def animate(i):
  T = np.zeros(len(x))
  for n in range(1,100):
    if n%2==1:
      cn=4*T0/np.pi/n
    else:
      cn=0
    lambdan=alpha*(n*np.pi/L)**2
    T=T+cn*np.exp(-lambdan*t[i])*np.sin(np.pi*n*x/L)
    
  line.set_data(x, T)
  return (line,)
  
t = np.linspace(0,3,100)

anim = animation.FuncAnimation(fig, animate, init_func=init,
                             frames=100, interval=100, blit=True)

# Note: below is the part which makes it work on Colab
rc('animation', html='jshtml')
anim
  

import numpy as np
import matplotlib.pyplot as plt

from matplotlib import animation, rc
from IPython.display import HTML

k=5

x = np.linspace(-2*np.pi , 2*np.pi, 200)

# First set up the figure, the axis, and the plot element we want to animate
fig, ax = plt.subplots()
plt.close()

f = -5*(x<0)+5*(x>0)
ax.plot(x,f,'--',label='f(x)')


ax.set_xlabel('x')
ax.set_ylabel('f(x)')
ax.set_ylim((-k-2,k+2))

line, = ax.plot([], [], lw=2, label='Approximation to f(x)')
last_term, = ax.plot([], [], lw=2, label='Latest term')

ax.legend()

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return (line,)

# animation function. This is called sequentially  
def animate(i):
  f_approx = np.zeros(len(x))
  term = np.zeros(len(x))
  for n in range(1,n_max[i]+1):
    if n%2==1:
      cn=4*k/np.pi/n
    else:
      cn=0

    term = cn*np.sin(n*x)
    f_approx+=cn*np.sin(n*x)
    
  line.set_data(x, f_approx)
  last_term.set_data(x,term)
  ax.set_title('n=%d'%n_max[i])
  return (line,)
  

n_max = list(range(1,60))

anim = animation.FuncAnimation(fig, animate, init_func=init,
                             frames=len(n_max), interval=100, blit=True)

# Note: below is the part which makes it work on Colab
rc('animation', html='jshtml')
anim
  

import numpy as np
import matplotlib.pyplot as plt

from matplotlib import animation, rc
from IPython.display import HTML


x = np.linspace(-2*np.pi , 2*np.pi, 200)

# First set up the figure, the axis, and the plot element we want to animate
fig, ax = plt.subplots()
plt.close()

f = np.abs(x)
ax.plot(x,f,'--',label='f(x)')

ax.set_xlabel('x')
ax.set_ylabel('f(x)')
ax.set_ylim((-k-2,k+2))

line, = ax.plot([], [], lw=2, label='Approximation to f(x)')
last_term, = ax.plot([], [], lw=2, label='Latest term')

ax.legend()

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return (line,)

# animation function. This is called sequentially  
def animate(i):
  f_approx = np.zeros(len(x))

  #Add in the first term
  a0 = np.pi/2
  f_approx+=a0

  #Add in the current cos term
  term = np.zeros(len(x))
  for n in range(1,n_max[i]+1):
    an=2/np.pi*((np.cos(n*np.pi)-1)/n**2)
    term = an*np.cos(n*x)
    f_approx+=an*np.cos(n*x)
    
  #Plot the most recent term and the full approximation
  line.set_data(x, f_approx)
  last_term.set_data(x,term)
  ax.set_title('n=%d'%n_max[i])
  return (line,)
  

n_max = list(range(1,60))

anim = animation.FuncAnimation(fig, animate, init_func=init,
                             frames=len(n_max), interval=100, blit=True)

# Note: below is the part which makes it work on Colab
rc('animation', html='jshtml')
anim
  



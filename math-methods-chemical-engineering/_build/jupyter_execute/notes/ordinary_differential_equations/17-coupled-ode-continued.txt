import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

A = np.array([[0, 2],
              [-2,0]])

def linear_homogeneous_diffeq(t, y):
  return A@y

def linear_diffeq(t, y):
  return [2*y[1],
          -2*y[0]]


tspan = [0, 10]
y0 = [2, 0.5]
t_eval = np.linspace(0,10,100)

sol = solve_ivp(linear_homogeneous_diffeq, tspan, y0, t_eval=t_eval)

plt.plot(sol.t, sol.y.T,'o-')
plt.xlabel('Time t')
plt.ylabel('y')


import numpy as np

# Quick numerical check to convince us that the eigenvalues/eigenvectors 
# are correct above
A = np.array([[3,5,3],
              [0,4,6],
              [0,0,1]])

eigval,eigvec = np.linalg.eig(A)

print(eigval)
print(eigvec[:,2])
print(eigvec[:,2]*7/eigvec[0,2])

import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

A = np.array([[3, 5, 3],
              [0, 4, 6],
              [0, 0, 1]])

def linear_homogeneous_diffeq(t, y):
  return A@y

tspan = [0, 1]
y0 = [4,2,6]
t_eval = np.linspace(0,1,100)

sol = solve_ivp(linear_homogeneous_diffeq, tspan, y0, t_eval=t_eval)

plt.plot(sol.t, sol.y.T,'o-')
plt.xlabel('Time t')
plt.ylabel('y')


import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

A = np.array([[-3, 1],
              [1,-3]])

def linear_nonhomogeneous_diffeq(t, y):
  return A@y + [3*np.cos(t),
                -2*np.cos(t)-3*np.sin(t)]

tspan = [0, 20]
y0 = [-100, 400000]
t_eval = np.linspace(0,20,100)

sol = solve_ivp(linear_nonhomogeneous_diffeq, tspan, y0, t_eval=t_eval)

plt.plot(sol.t, sol.y.T,'o-')
plt.xlabel('Time t')
plt.ylabel('y')
plt.ylim([-2,2])


import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

A = np.array([[-2, 1],
              [1,-2]])

def linear_nonhomogeneous_diffeq(t, y):
  return A@y + [2*np.exp(-t),
                3*t]

tspan = [1, 10]
y0 = [4, 3]
t_eval = np.linspace(1,10,100)

sol = solve_ivp(linear_nonhomogeneous_diffeq, tspan, y0, t_eval=t_eval)

plt.plot(sol.t, sol.y.T,'o-')
plt.xlabel('Time t')
plt.ylabel('y')
# plt.ylim([-2,2])




import numpy as np

A = np.array([[6,10,6],
              [0,8,12],
              [0,0,2]])

# Fill this in!
eigvals, eigvecs = np.linalg.eig(A)

# Notice that we can use variables in a print!
# f'something {var}' means sub in the var in the string
print(f'Eigenvalues = {eigvals}') 
print(f'Eigenvectors: \n{eigvecs}')

eigvecs[:,1]/eigvecs[0,1]*5

eigvecs[0,1]/eigvecs[1,1]

eigvecs[:,2]/eigvecs[2,2]*2

A = np.array([[1,2],
              [-2,1]])

eigvals, eigvecs = np.linalg.eig(A)

print(f'Eigenvalues = {eigvals}')
print(f'Eigenvectors: \n{eigvecs}')

eigvals[0]+1.j

a = 1+2.j
print('a=%s'%str(a))
print('a+1=%s'%str(a+1))
print('2a=%s'%str(2*a))

import numpy as np

A = np.array([[0,9,-12],
              [-9,0,20],
              [12,-20,0]])

eigvals, eigvecs = np.linalg.eig(A)

print(eigvals)

print(eigvecs)

A = np.array([[0.3,0.2,0],
              [0.6,0.2,0],
              [.1,0.6,1]])

eigvals, eigvecs = np.linalg.eig(A)

print(f'Eigenvalues = {eigvals}')
print(f'Eigenvectors: \n{eigvecs}')

# make a vector p for the starting population

# 3 random numbers from 0-1 that up to 1
np.random.seed(42)
p = np.random.rand(3)
p = p/p.sum()

# multiply each fraction by 1000 people
p = p*1000

# Make sure there's an integer number of people
p = p.round()

print('The starting population is %d healthy, %d sick, %d dead'%(p[0],p[1],p[2]))

p2 = A@p
print('The population after one year is %d healthy, %d sick, %d dead'%(p2[0],p2[1],p2[2]))

n_years = 200
p2 = np.linalg.matrix_power(A,n_years)@p
print('The population after %d year is %1.3f healthy, %1.3f sick, %1.3f dead'%(n_years, p2[0],p2[1],p2[2]))

def population(init_pop, n_years):
  return np.linalg.matrix_power(A,n_years)@init_pop

population(p,3)

c_vector = np.linalg.solve(eigvecs, p)

print(c_vector)

p_infinite = c_vector[0]*eigvecs[:,0]
print('The final population after infinite years is %d healthy, %d sick, %d dead'%(p_infinite[0],
                                                                                   p_infinite[1],
                                                                                   p_infinite[2]))

A = np.array([[0.3,0.2,0],
              [0.6,0.2,0.2],
              [.1,0.6,0.8]])

eigvals, eigvecs = np.linalg.eig(A)

print(eigvals)

print(eigvecs)

zombie_A = np.array([[0.3,0.2,0],
              [0.6,0.2,0.2],
              [.1,0.6,0.8]])

def zombie_population(init_pop, n_years):
  return np.linalg.matrix_power(zombie_A,n_years)@init_pop

zombie_population([800,200,0],100)


init_pop = [1000,0,0]
num_healthy = [zombie_population(init_pop,n_years)[0] for n_years in range(0,20)]
num_sick = [zombie_population(init_pop,n_years)[1] for n_years in range(0,20)]
num_dead = [zombie_population(init_pop,n_years)[2] for n_years in range(0,20)]

import matplotlib.pyplot as plt
plt.plot(range(0,20),num_healthy,label='Healthy')
plt.plot(range(0,20),num_sick, label='Sick')
plt.plot(range(0,20),num_dead, label='Dead')
plt.legend()
plt.xlabel('Number of Years')
plt.ylabel('Number of Dead Population')

zombie_A = np.array([[0.3,0.2,0],
              [0.6,0.2,0.2],
              [.1,0.6,0.8]])

def zombie_population(init_pop, n_years):
  return np.linalg.matrix_power(zombie_A,n_years)@init_pop

zombie_population(p, 400)


